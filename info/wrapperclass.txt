provides mechanism to convert primitive into object and object to primitive
autoboxing and unboxing converts primitive into object and object to primitive

Use of Wrapper classes in Java:
    Change the value in Method: 
        Java supports only call by value. So, if we pass a primitive value, it will not change the original value.
        But, if we convert the primitive value in an object, it will change the original value.
    
    Serialization:
        We need to convert the objects into streams to perform the serialization.
        If we have a primitive value, we can convert it in objects through the wrapper classes.

    Synchronization: 
        Java synchronization works with objects in Multithreading.

    java.util package: 
        The java.util package provides the utility classes to deal with objects.

    Collection Framework:
        Java collection framework works with objects only.
        All classes of the collection framework (ArrayList, LinkedList, Vector, HashSet, LinkedHashSet, TreeSet, PriorityQueue, ArrayDeque, etc.) deal with objects only.


AUTOBOXING :
    automatic conversion of primitive data type into its correspomding wrapper class is known as autoboxing.
    byte to byte
    char to Character
    int to Integer
    long to Long 
    boolean to Boolean 
    short to Short 

public class Wrapper1{
    public static void main(String args[]){
        int a = 20;
        Integer i = Integer.valueOf(a);
        Integer j = a;
        System.out.println(a + " " + i + " " + j);
    }
}


UNBOXING :
    automatic conversion of wrapper type into its corrresponding primitive type is known as unboxing.
    reverse process of autoboxing

public class wrapper2{
    public static void main(String args[]){
        Integer a = new Integer(3);
        int j = a;

        System.out.println(a + " " + j);
    }
}

----------------------------------------------------------------------------------------------------------------------

public class Wrapper3{
    public static void main(String args[]){
        byte b =10;
        short s = 20;
        int i= 1;
        float f = 50.0F;
        double d = 60.0D;
        char c = 'a';
        boolean b1 = true;

        Byte byteobj = b;         // converting primitives into objects
        Short shortobj = s;
        Integer intobj = i;
        Float floatobj = f;
        Double doubleobj = d;
        Character charobj = c;
        Boolean boolobj = b1;

        byte bytevalue=byteobj;   //converting objects into primitives
        short shortvalue=shortobj;  
        int intvalue=intobj;    
        float floatvalue=floatobj;  
        double doublevalue=doubleobj;  
        char charvalue=charobj;  
        boolean boolvalue=boolobj; 
    }
}


-----------------------------------------------------------------------------------------------------------------------

CUSTOM PRIMITVE OBJECTS:
    class Wrapper4{
        private int i;
        Wrapper4(int i){
            this.i= i;
        }
    }
    public int getValue(){
        return i;
    }
    public void setValue(int i){  
        this.i=i;  
    }  
    public String toString() {  
        return Integer.toString(i);  
    }  
}  

public class TestJavatpoint{  
    public static void main(String[] args){  
        Javatpoint j=new Javatpoint(10);  
        System.out.println(j);  
    }
}  
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

