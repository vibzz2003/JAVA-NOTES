string objects are immutable
they are unmodified and unchangable
----------------------------------------------------------------------------------------

class Strings1{
    public static void main(String args[]){
        String s = "Sachin";
        s.concat("Tendulakr");
        System.out.println(s);
    }
}   // the output will be sachin only

-----------------------------------------------------------------------------------------

class Stings1{
    public static void main(String args[]){
        String s = "Sachin";
        s = s.concat("Tendulkar");
        System.out.println(s);
    }
}   // the output would be sachin Tendulkar

-----------------------------------------------------------------------------------------

why is strings immutable:
 1. ClassLoader:
    A ClassLoader in Java uses a String object as an argument. 
    Consider, if the String object is modifiable, the value might be changed and the class that is supposed to be loaded might be different.
    //string object is taken as argument which has to be loaded and if done so then it would lead to change in classes.

 2. Thread Safe:
     As the String object is immutable we don't have to take care of the synchronization that is required while sharing an object across multiple threads.
     // no need to worry about the synchronisation here as it is immutable

 3. Security:
     this leads to making the program more secure as they are immutable and they lead to less mistakes in loading the wrong class

the string class is final in java so that it cannot be overridden.

-------------------------------------------------------------------------------------------------------------------------------------------------------------

comparision of strings:
    By Using equals() Method
    By Using == Operator
    By compareTo() Method

1) equals() method:
    compares the original content of the string:
    class String2{
        public static void main(String args[]){
            String s1 = "sachin";
            String s2 = "Tendulkar";
            String s3 = new String("sachin");
            System.out.println(s1.equals(s2)); //false
            System.out.println(s1.equals(s3)); //true
        }
    }

    in this case sachin and SACHIN is not equal

2) using == operator:
    compares reference not values
    class String2{
        public static void main(String args[]){
            String s1 = "sachin";
            String s2 = "Tendulkar";
            String s3 = new String("sachin");
            System.out.println(s1==s2); //false
            System.out.println(s1==s3); //true
        }
    }
    in this case sachin and SACHIN is equal

3) Using compareTo() method:
    compares values lexicographically and returns an integer value that describes the condition:
    if equal then 0
    if one string is greater then positive
    if protagonist string is small then negative
    class String2{
        public static void main(String args[]){
            String s1 = "sachin";
            String s2 = "Tendulkar";
            String s3 = new String("sachin");
            System.out.println(s1.compareTo(s2)); //-1
            System.out.println(s1.compareTo(s3)); //0
        }
    }

-------------------------------------------------------------------------------------------------------------------------------------------------
String Concatenation in Java:
    By + (String concatenation) operator
    By concat() method

    String Concatenation by + (String concatenation) operator:
        class String3{
            public static void main(String args[]){
                String s1 = "Sachin" + "Tendulakr";
                System.out.println(s);
            }
        }
    
    compiler sees it as:
     String s = (new StringBuilder()).append("sachin").append("tendulkar").toString();

    *
    class String4{
        public static void main(String args[]){
            String s = 30 + 50 + "sachin" +40 + 40;
            System.out.println(s); // 80sachin4040
        }
    }
    


     String Concatenation by concat() method
     class String2{
        public static void main(String args[]){
            String s1 = "sachin";
            String s2 = "Tendulkar";
            String s3 = s1.concat(s2);
            System.out.println(s3); 
        }
    }

--------------------------------------------------------------------------------------------------------------------------------------------

SUBSTRING:
    part of string
    the startindex is inclusive
    the endindex is exclusive

    class String4{
        public static void main(string args[]){
            String s = "sachin";
            System.out.println(s.substring(0,4)); //sachi
        }
    }

----------------------------------------------------------------------------------------------------------------------------------------------

String class methods:
    java.lang.String have lots of built in methods

    //UpperCase() to LowerCase():
        public class String5{
            public static void main(String args[]){
                String s = "sachin";
                System.out.println(s.toUpperCase());
                System.out.println(s.toLowerCase());
                System.out.println(s);
            }
        }


    //trim : eliminates the white spaces:
         public class String5{
            public static void main(String args[]){
                String s = "  sachin  ";
                System.out.println(s.trim());
                System.out.println(s);
            }
        } 

    
    //startsWith() and endsWith():
        public class String5{
            public static void main(String args[]){
                String s = "sachin";
                System.out.println(s.startsWith("sa")); //true
                System.out.println(s.endsWith("n")); //true
            }
        } 


    charAt() method :
        public class String5{
            public static void main(String args[]){
                String s = "sachin";
                System.out.println(s.charAt(0)); //s
            }
        } 


    length() :
        public class String5{
            public static void main(String args[]){
                String s = "sachin";
                System.out.println(s.length()); //6
            }
        } 

    valueOf() :
        public class String6{
            public static void main(String args[]){
                int a = 10;
                String s = String.valueOf(a);
                System.out.println(s + 10); //1010
            }
        }

    replace():
        public class String6{
            public static void main(String args[]){
                String s1 = " Java is a programming language. Java is a stupid language.";
                String replaceString = s1.replace("Java","Hava");
                System.out.println(replaceString);
            }
        }

----------------------------------------------------------------------------------------------------------------------------------

STRING BUFFER :
this class is used to create muttable strings

StringBuffer() : creates an empty class with the initial capacity of 16

StringBuffer(String str) : creates a String buffer with the specified string 

StringBuffer(int capacity) : creates an empty Stringbuffer with the specified capacity as length

methods:
    StringBuffer:

        append:
        class String6{
            public static void main(String args[]){
                StringBuffer sb = new StringBuffer("hello");
                sb.append("Java");
                System.out.println(sb);
            }
        }
        

        insert:
        class String6{
            public static void main(String args[]){
                StringBuffer sb = new StringBuffer("hello");
                sb.insert(1,"Java");   //hJavaello
                System.out.println(sb);
            }
        }

        
        replace:
        class String6{
            public static void main(String args[]){
                StringBuffer sb = new StringBuffer("hello");
                sb.replace(1,3,"Java");
                System.out.println(sb); //HJavalo   
            }
        }


        delete():
        class String6{
            public static void main(String args[]){
                StringBuffer sb = new StringBuffer("Hello");
                sb.delete(1,3);
                System.out.println(sb); //Hlo
            }
        }


        reverse():
        class String6{
            public static void main(String args[]){
                StringBuffer sb = new StringBuffer("hello");
                sb.reverse();
                System.out.println(sb); //olleH
            }
        }


        capacity():
        stringbuffer default capacity is  16
        increases by : (oldcapacity*2)+2

        class String6{
            public static void main(String args[]){
                StringBuffer sb = new StringBuffer();
                System.out.println(sb.capacity()); //16
                sb.append("hello");
                System.out.println(sb.capacity()); //16
                sb.append("java is so bakwaas language");
                System.out.println(sb.capacity()); //34
            }
        }

---------------------------------------------------------------------------------------------------------------------

String builder same as String buffer // all methods

----------------------------------------------------------------------------------------------------------------------

1)  The String class is immutable.	        The StringBuffer class is mutable.
                                              
2)	String is slow and consumes             StringBuffer is fast and consumes 
    more memory when we concatenate         less memory when we 
    too many strings because every          concatenate t strings.
    time it creates new instance.                                        
    	
3)	String class overrides the equals()     StringBuffer class doesn't
    method of Object class.                 override the equals() method
    So you can compare the contents of      of Object class.
    two strings by equals() method.	  

4)	String class is slower while            StringBuffer class is faster while
    performing concatenation                performing concatenation operation.
    operation.	 

5)	String class uses String                StringBuffer uses Heap memory
    constant pool.	

6) StringBuilder is non-synchronized        StringBuffer is synchronized
   i.e. not thread safe.                    i.e. thread safe.

7) StringBuilder is more efficient          StringBuffer is less efficient

8) StringBuilder was introduced             StringBuffer was introduced in Java 1.0
   in Java 1.5

    ---------------------------------------------------------------------------------------------------------------------











