The Collection in Java is a framework that provides an architecture to store and manipulate the group of objects.
Java Collections can achieve all the operations that you perform on a data such as searching, sorting, insertion, manipulation, and deletion.

Java Collection framework provides many interfaces
(Set, List, Queue, Deque) and 
classes (ArrayList, Vector, LinkedList, PriorityQueue, HashSet, LinkedHashSet, TreeSet).

The Collection framework represents a unified architecture for storing and manipulating a group of objects. It has:

Interfaces and its implementations, i.e., classes
Algorithm

----------------------------------------------------------------------------------------------------------------------------
ITERATOR 
Iterator interface provides the facility of iterating the elements in a forward direction only.

public boolean hasNext() - It returns true if the iterator has more elements otherwise it returns false.

public Object next() - It returns the element and moves the cursor pointer to the next element.

public void remove() - It removes the last elements returned by the iterator. It is less used.

-----------------------------------------------------------------------------------------------------------------------------

Iterable Interface:
    The Iterable interface is the root interface for all the collection classes

    The Collection interface extends the Iterable interface and therefore all the 
    subclasses of Collection interface also implement the Iterable interface.

    It contains only one abstract method

    Iterator<T> iterator()  
------------------------------------------------------------------------------------------------------------------------------

Collection Interface:
    The Collection interface is the interface which is implemented by all the classes in the collection framework.

    It declares the methods that every collection will have.

    Some of the methods of Collection interface are Boolean add ( Object obj), Boolean addAll ( Collection c), void clear(), etc.
----------------------------------------------------------------------------------------------------------------------------------

List Interface :
    List interface is the child interface of Collection interface.
    It can have duplicate values.
    
    to instantiate list interface,
    List <data-type> list1= new ArrayList();  
    List <data-type> list2 = new LinkedList();  
    List <data-type> list3 = new Vector();  
    List <data-type> list4 = new Stack();  


ArrayList:
    The ArrayList class implements the List interface.
    It uses a dynamic array to store the duplicate element of different data types. 
    he ArrayList class maintains the insertion order and is non-synchronized.

    import java.util.*;
    class Collections{
        public static void main(String args[]){
            ArrayList<String>list = new ArrayList<String>();
            list.add("ravi");
            list.add("vijay");
            list.add("ravi");
            list.add("ajay");

            Iterator itr = list.Iterator();
            while(itr.hasNext()){
                System.out.println(itr.next());
            }
        }
    }



LinkedList:
    It uses a doubly linked list internally to store the elements. 
    It can store the duplicate elements.
    It maintains the insertion order and is not synchronized.

    import java.util.*;
    class Collections{
        public static void main(String args[]){
            LinkedList<String>list = new LinkedList<String>();
            list.add("ravi");
            list.add("vijay");
            list.add("ravi");
            list.add("ajay");

            Iterator<String>itr = list.iterator();
            while(itr.hasNext()){
                System.out.println(itr.next());
            }
        }
    }

-----------------------------------------------------------------------------------------------------------------------------------------------

Vector :
    Vector uses a dynamic array to store the data elements.
    It is similar to ArrayList.
    However, It is synchronized and contains many methods that are not the part of Collection framework.

    import java.util.*;
     public class Collections{
        public static void main(Strind args[]){
            Vector<String>v = new Vector<String>();
            v.add("vibhor");
            v.add("ranya");
            v.add("are");
            v.add("lovers");

            Iterator<String>itr = v.iterator();
            while(itr.hasNext()){
                System.out.println(itr.Next());
            }
        }
    }



Stack :
    stack is the subclass of Vector
    It implements the last-in-first-out data structure, i.e., Stack. 
    The stack contains all of the methods of Vector class and also provides its methods like boolean push(), boolean peek(), boolean push(object o), which defines its properties.

import java.util.*;  
public class TestJavaCollection4{  
public static void main(String args[]){  
Stack<String> stack = new Stack<String>();  
stack.push("Ayush");  
stack.push("Garvit");  
stack.push("Amit");  
stack.push("Ashish");  
stack.push("Garima");  
stack.pop();  
Iterator<String> itr=stack.iterator();  
while(itr.hasNext()){  
System.out.println(itr.next());  
}  
}  
}     
--------------------------------------------------------------------------------------------------------------------------------------------------------------------

Queue Interface :
    Queue interface maintains the first-in-first-out order.
    It can be defined as an ordered list that is used to hold the elements which are about to be processed.
    There are various classes like PriorityQueue, Deque, and ArrayDeque which implements the Queue interface.

Queue interface can be instantiated as:

Queue<String> q1 = new PriorityQueue();  
Queue<String> q2 = new ArrayDeque();  


PriorityQueue:
    implements the Queue interface.
    It holds the elements or objects which are to be processed by their priorities.
    PriorityQueue doesn't allow null values to be stored in the queue.

import java.util.*;  
public class TestJavaCollection5{  
public static void main(String args[]){  
PriorityQueue<String> queue=new PriorityQueue<String>();  
queue.add("Amit Sharma");  
queue.add("Vijay Raj");  
queue.add("JaiShankar");  
queue.add("Raj");  
System.out.println("head:"+queue.element());  
System.out.println("head:"+queue.peek());  
System.out.println("iterating the queue elements:");  
Iterator itr=queue.iterator();  
while(itr.hasNext()){  
System.out.println(itr.next());  
}  
queue.remove();  
queue.poll();  
System.out.println("after removing two elements:");  
Iterator<String> itr2=queue.iterator();  
while(itr2.hasNext()){  
System.out.println(itr2.next());  
}  
}  
}    


Deque Interface :
    Deque interface extends the Queue interface. 
    In Deque, we can remove and add the elements from both the side.

    Deque d = new ArrayDeque();  

ArrayDeque :
    ArrayDeque class implements the Deque interface.
    ArrayDeque is faster than ArrayList and Stack and has no capacity restrictions.

import java.util.*;  
public class TestJavaCollection6{  
public static void main(String[] args) {  
//Creating Deque and adding elements  
Deque<String> deque = new ArrayDeque<String>();  
deque.add("Gautam");  
deque.add("Karan");  
deque.add("Ajay");  
//Traversing elements  
for (String str : deque) {  
System.out.println(str);  
}  
}  
}  

------------------------------------------------------------------------------------------------------------------------------------------------------------------

Set Interface:
     It represents the unordered set of elements which doesn't allow us to store the duplicate items.
     We can store at most one null value in Set
     Set is implemented by HashSet, LinkedHashSet, and TreeSet.

Set<data-type> s1 = new HashSet<data-type>();  
Set<data-type> s2 = new LinkedHashSet<data-type>();  
Set<data-type> s3 = new TreeSet<data-type>();  

HashSet:
    It represents the collection that uses a hash table for storage. 
    Hashing is used to store the elements in the HashSet. It contains unique items.

import java.util.*;  
public class TestJavaCollection7{  
public static void main(String args[]){  
//Creating HashSet and adding elements  
HashSet<String> set=new HashSet<String>();  
set.add("Ravi");  
set.add("Vijay");  
set.add("Ravi");  
set.add("Ajay");  
//Traversing elements  
Iterator<String> itr=set.iterator();  
while(itr.hasNext()){  
System.out.println(itr.next());  
}  
}  
}   


LinkedHashSet:
    It extends the HashSet class and implements Set interface. 
    Like HashSet, It also contains unique elements.
    It maintains the insertion order and permits null elements.

import java.util.*;  
public class TestJavaCollection8{  
public static void main(String args[]){  
LinkedHashSet<String> set=new LinkedHashSet<String>();  
set.add("Ravi");  
set.add("Vijay");  
set.add("Ravi");  
set.add("Ajay");  
Iterator<String> itr=set.iterator();  
while(itr.hasNext()){  
System.out.println(itr.next());  
}  
}  
}  

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

SortedSet Interface:
    The elements of the SortedSet are arranged in the increasing (ascending) order.
    The SortedSet provides the additional methods that inhibit the natural ordering of the elements.

    SortedSet<data-type> set = new TreeSet();  

TreeSet:
    TreeSet also contains unique elements. 
    However, the access and retrieval time of TreeSet is quite fast.
    The elements in TreeSet stored in ascending order.

import java.util.*;  
public class TestJavaCollection9{  
public static void main(String args[]){  
//Creating and adding elements  
TreeSet<String> set=new TreeSet<String>();  
set.add("Ravi");  
set.add("Vijay");  
set.add("Ravi");  
set.add("Ajay");  
//traversing elements  
Iterator<String> itr=set.iterator();  
while(itr.hasNext()){  
System.out.println(itr.next());  
}  
}  
}  

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

ArrayList:

public class Demo{
    public static void main(String args[]){
        ArrayList<String>l = new ArrayList<String>();
        l.add("name");
        l.add("name");
        l.add("name");
        l.add("name");

        Iterator<String>itr = l.iterator();
        while(Itr.hasNext()){
            System.out.println(its.next());
        }
    }
}


can also be iterated as:

for(String name:l){
    System.out.println(name);
}

public class Demo{
    public static void main(String args[]){
        ArrayList<String>l = new ArrayList<String>();
        l.add("name");
        l.add("name");
        l.add("name");
        l.add("name");
        System.out.println(l.get(1))// provides the 2nd element
        l.set(2,"NAME");
        for(String name:l){
            Sop(name);
        }
    }
}

for sorting the arraylist use : Collections.sort(listname);
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

There are various ways to traverse the collection elements:

By Iterator interface.
By for-each loop.
By ListIterator interface.
By for loop.
By forEach() method.
By forEachRemaining() method.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

for(int i=0; i<list.size(); i++){
    System.out.println(list.get(i));
}

import java.util.*;  
 class ArrayList5{  
 public static void main(String args[]){  
  //Creating user-defined class objects  
  Student s1=new Student(101,"Sonoo",23);  
  Student s2=new Student(102,"Ravi",21);  
  Student s2=new Student(103,"Hanumat",25);  
  //creating arraylist  
  ArrayList<Student> al=new ArrayList<Student>();  
  al.add(s1);//adding Student class object  
  al.add(s2);  
  al.add(s3);  
  //Getting Iterator  
  Iterator itr=al.iterator();  
  //traversing elements of ArrayList object  
  while(itr.hasNext()){  
    Student st=(Student)itr.next();  
    System.out.println(st.rollno+" "+st.name+" "+st.age);  
  }  
 }  
}  

to add all of l2 into l1 :
l1.addAll(l2);

to remove:
l1.remove();

l1.clear(); //for clearing the whole list


retain:
    public class Demo{
        public static void main(String args[]){
            arraylist<String>a = new ArrayList<String>();
            a.add("a");
            a.add("B");
            a.add("C");

            arraylist<String>a1 = new ArrayList<String>();
            a1.add("a");
            a1.add("b");
            a1.add("c");

            a.retain(a1);

            Iterator<String>itr = a.iterator();
            sop(); /// ans : a

        }
    }
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Linked list:
    class Linkedl{
        public static void main(String args[]){
            LinkedList<String>ll = new LinkedList<String>();
            ll.add("name");
            ll.add("name");
            ll.add("name");
            ll.add("name");
            Iterator<String>itr = ll.iterator();
            while(itr.hasNext()){
                System.out.println(itr.Next());
            }

            LinkedList<String>ll2 = new LinkedList<String>();
            ll2.add("NAME");
            ll2.add("NAME");
            ll2.add("NAME");

            ll.addAll(ll2);
            System.out.println(ll);
            
            LinkedList<String>ll3 = new LinkedList<String>();

            ll3.add("Name");
            ll3.add("Name");
            ll.addAll(1,ll3);

            ll.addFirst("lokesh");
            ll.addLast("ravi");
        }
    }

for removing :

ll.remove(index number)
ll.remove("String name")
ll.removeAll(ll2);
ll.removeFirst();
ll.removeLast();
ll.removeFirstOccurence();
ll.removeLastOccurence();


to reverse a list:

Iterator<String>itr = ll.descendingiterator();
while(itr.hasNext()){
    System.out.println(i.next());
}

class Book{
    int id;
    String authorname,bookname;
    public Book(int id, String authorname, String bookname){
        this.id = id;
        this.authorname = authorname;
        this.bookname = bookname;
    }
}
public class Linkedlist{
    public static void main(String args[]){
        List<Book>list = new Linkedlist<Book>();

        Book b1 = new Book(123,"vibhor","spiderman");
        Book b2 = new Book(345,"ranya","spidergwen");
        Book b3 = new Book(678,"zaeden","spiderboy");
        Book b4 = new Book(901,"shiara","spidergirl");

        list.add(b1);
        list.add(b2);
        list.add(b3);
        list.add(b4);

        for(Book b:list){
            System.out.println("serial number : " + b.id + "author name is : " + b.authorname + "book name is : " + b.bookname);
        }
    }
}



1) ArrayList internally uses a dynamic array to store the elements.          LinkedList internally uses a doubly linked list to store the elements.

2)Manipulation with ArrayList is slow because it internally uses an array.   Manipulation with LinkedList is faster

3) An ArrayList class can act as a list only                                 LinkedList class can act as a list and queue both 

4) ArrayList is better for storing and accessing data.                       LinkedList is better for manipulating data.

5) The memory location for the elements of an ArrayList is contiguous.       The location for the elements of a linked list is not contagious.

7) To be precise, an ArrayList is a resizable array.                         LinkedList implements the doubly linked list of the list interface.

array list is more cache frienfly                                            memory overhead is more

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Array to list conversion :

imort java.util.*;
class araay{
    publis static void main(Sting args[])[
        String[] a = {"name1","name2"};
        System.out.println("printing array"  + Arrays.ToString(a));

        List<String>l = new ArrayList<String>();
        for(String lang:a){
            l.add(lang);
        }

        sop(l);
    ]
}


list to array :

String[] array = listname.toArray(new String[listname.size()]);

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Java HashSet class is used to create a collection that uses a hash table for storage. It inherits the AbstractSet class and implements Set interface.
HashSet stores the elements by using a mechanism called hashing.
HashSet contains unique elements only.
HashSet allows null value.
HashSet class is non synchronized.
HashSet doesn't maintain the insertion order. Here, elements are inserted on the basis of their hashcode.
HashSet is the best approach for search operations.
The initial default capacity of HashSet is 16, and the load factor is 0.75.

HashSet<String> setname = new HashSet<String>();


setname.remove(str->str.contains("name"));

Java LinkedHashSet class is a Hashtable and Linked list implementation of the Set interface. It inherits the HashSet class and implements the Set interface.

The important points about the Java LinkedHashSet class are:

Java LinkedHashSet class contains unique elements only like HashSet.
Java LinkedHashSet class provides all optional set operations and permits null elements.
Java LinkedHashSet class is non-synchronized.
Java LinkedHashSet class maintains insertion order.

LinkedHashSet<String>lhs = new LinkedHashSet<String>();

if u remove preset element from it, it returns true if not present then false



Java TreeSet class implements the Set interface that uses a tree for storage. It inherits AbstractSet class and implements the NavigableSet interface. The objects of the TreeSet class are stored in ascending order.

The important points about the Java TreeSet class are:

Java TreeSet class contains unique elements only like HashSet.
Java TreeSet class access and retrieval times are quiet fast.
Java TreeSet class doesn't allow null element.
Java TreeSet class is non synchronized.
Java TreeSet class maintains ascending order.
Java TreeSet class contains unique elements only like HashSet.
Java TreeSet class access and retrieval times are quite fast.
Java TreeSet class doesn't allow null elements.
Java TreeSet class is non-synchronized.
Java TreeSet class maintains ascending order.
The TreeSet can only allow those generic types that are comparable. For example The Comparable interface is being implemented by the StringBuffer class.

set.pollFirst() //lowest value
set.pollLast()  //highest value

set.subset("a",false);
set.subset("c",true);
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Map<String,integer>map = new HashMap<Integer,String>();
map.put(1,"a");
map.put(2,"b");
map.put(3,"C");





