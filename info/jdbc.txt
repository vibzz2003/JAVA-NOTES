JDBC stands for Java Database Connectivity.
JDBC is a Java API to connect and execute the query with the database.
 It is a part of JavaSE (Java Standard Edition). 
JDBC API uses JDBC drivers to connect with the database.

There are four types of JDBC drivers:
JDBC-ODBC Bridge Driver,
Native Driver,
Network Protocol Driver, and
Thin Driver

We can use JDBC API to access tabular data stored in any relational database.
By the help of JDBC API, we can save, update, delete and fetch data from the database. 
It is like Open Database Connectivity (ODBC) provided by Microsoft.


The current version of JDBC is 4.3.
The java.sql package contains classes and interfaces for JDBC API.

Driver interface
Connection interface
Statement interface
PreparedStatement interface
CallableStatement interface
ResultSet interface
ResultSetMetaData interface
DatabaseMetaData interface
RowSet interface

DriverManager class
Blob class
Clob class
Types class

We can use JDBC API to handle database using Java program and can perform the following activities:
Connect to the database
Execute queries and update statements to the database
Retrieve the result received from the database.




API (Application programming interface) is a document that contains a description of all the features of a product or software.
It represents classes and interfaces that software programs can follow to communicate with each other.
An API can be created for applications, libraries, operating systems, etc.

-------------------------------------------------------------------------------------------------------------------------------------------

JDBC DRIVERS:
JDBC Driver is a software component that enables java application to interact with the database. 
JDBC-ODBC bridge driver
Native-API driver (partially java driver)
Network Protocol driver (fully java driver)
Thin driver (fully java driver)

1) JDBC-ODBC bridge driver :
    The JDBC-ODBC bridge driver uses ODBC driver to connect to the database.
    The JDBC-ODBC bridge driver converts JDBC method calls into the ODBC function calls.
    This is now discouraged because of thin driver.

    Advantages:
       easy to use.
       can be easily connected to any database.

    Disadvantages:
       Performance degraded because JDBC method call is converted into the ODBC function calls.
       The ODBC driver needs to be installed on the client machine.

    
2) Native-API driver :
   The Native API driver uses the client-side libraries of the database. 
   The driver converts JDBC method calls into native calls of the database API.
   It is not written entirely in java.

   Advantage:
       performance upgraded than JDBC-ODBC bridge driver.

   Disadvantage:
       The Native driver needs to be installed on the each client machine.
       The Vendor client library needs to be installed on client machine.


3) Network Protocol driver :
   The Network Protocol driver uses middleware (application server) that converts JDBC calls directly or indirectly into the vendor-specific database protocol.
   It is fully written in java.

   Advantage:
     No client side library is required because of application server that can perform many tasks like auditing, load balancing, logging etc.

   Disadvantages:
     Network support is required on client machine.
     Requires database-specific coding to be done in the middle tier.
     Maintenance of Network Protocol driver becomes costly because it requires database-specific coding to be done in the middle tier.


4) Thin driver :
    The thin driver converts JDBC calls directly into the vendor-specific database protocol.
    That is why it is known as thin driver. It is fully written in Java language.


    Advantage:
      Better performance than all other drivers.
      No software is required at client side or server side.

    Disadvantage:
      Drivers depend on the Database.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Java Database Connectivity with 5 Steps
There are 5 steps to connect any java application with the database using JDBC. These steps are as follows:
Register the Driver class
Create connection
Create statement
Execute queries
Close connection

1) Register the driver class:
The forName() method of Class class is used to register the driver class.
This method is used to dynamically load the driver class.

public static void forName(String className)throws ClassNotFoundException  


2) Create the connection object:

The getConnection() method of DriverManager class is used to establish connection with the database.
public static Connection getConnection(String url)throws SQLException  

public static Connection getConnection(String url,String name,String password)  
throws SQLException   

3) Create the Statement object
The createStatement() method of Connection interface is used to create statement.
 The object of statement is responsible to execute queries with the database.

 public Statement createStatement()throws SQLException  
 Statement stmt=con.createStatement();  

4) Execute the query
The executeQuery() method of Statement interface is used to execute queries to the database. This method returns the object of ResultSet that can be used to get all the records of a table.
public ResultSet executeQuery(String sql)throws SQLException  

ResultSet rs=stmt.executeQuery("select * from emp");  
  
while(rs.next()){  
System.out.println(rs.getInt(1)+" "+rs.getString(2));  
}  

5) Close the connection object
By closing connection object statement and ResultSet will be closed automatically. The close() method of Connection interface is used to close the connection.

public void close()throws SQLException  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

import java.sql.*;
class Fetchrecord{
  publlic static void main(String args[])throws SQLException{
    Class.forName("oracle.jdbc.drive.OracleDriver);
    Connection con = DriverManager.getConnection("jdbc:oracle:thin:@:localhost:1521:xe)
    Statement stmt = con.createStatement();
    int result=stmt.executeUpdate("delete from emp765 where id=33");  
    System.out.println(result+" records affected");  
con.close();  
}}  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

