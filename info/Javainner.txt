//Java inner class or nested class is a class that is declared inside the class or interface.
//We use inner classes to logically group classes and interfaces in one place to be more readable and maintainable.
//it can access all the members (data members and methods) of the outer class, including private.
// to develop more readable and maintainable code 
//Code Optimization: It requires less code to write.
-------------------------------------------------------------------------------------------------------------------------------
//There are two types of nested classes non-static and static nested classes. 
//Non-static nested class (inner class)
     //Member inner class
     //Anonymous inner class
     //Local inner class


//Static nested class 
--------------------------------------------------------------------------------------------------------------------------------

NON STATIC CLASSES :

1) Member inner classes :
    A non-static class that is created inside a class but outside a method is called member inner class.
    It is also known as a regular inner class.
    It can be declared with access modifiers like public, default, private, and protected.
    
    class Outerclass{
        private int data = 6;
        class Inner{
            void msg(){
                System.out.println("the data is"+ data);
            }
        }
        public static void main(String args[]){
            Outerclass obj = new Outerclass();
            Outerclass.Inner in = obj.new Inner();  // data is 6
            in.msg();
        }
    }

    An object or instance of a member's inner class always exists within an object of its outer class.
    OuterClassReference.new MemberInnerClassConstructor();  
    The java compiler creates two class files in the case of the inner class. The class file name of the inner class is "Outer$Inner"



2) Anonymous inner classes :
    Java anonymous inner class is an inner class without a name and for which only a single object is created.
    It should be used if you have to override a method of class or interface. 

    Class (may be abstract or concrete).
    Interface

    abstract class Person{
        abstract void eat();
        }
    }
    class AnonymousInner{
        public static void main(String args[]){
            Person p = new Person(){
                void eat(){
                    System.out.println("i am anonymous inner class");
                }
            };
            p.eat();
        }
    }


    interface Eatable{
        void eat();
    }
    class Inner{
        psvm(){
        Eatable e = new Eatable(){
            void eat(){
                System.out.println("i am an AnonymousInner class inside an interface");
            }
        };
        e.eat();
        }
    }


3)Local inner classes :
    A class i.e., created inside a method, is called local inner class in java.
    Local Inner Classes are the inner classes that are defined inside a block.
    Generally, this block is a method body.
     They belong to the block they are defined within, due to which local inner classes cannot have any access modifiers associated with them.
     If you want to invoke the methods of the local inner class, you must instantiate this class inside the method.


    class Outer{
        void run();
        void eat(){
            class Local{
                void run(){
                    System.out.println("running");
                }
                Local l = new Local();
                l.run();
            }
        }
        public static void main(String args[]){
            Outer o = new Outer();
            o.eat();
        }
    }



    class Outer{
        void run();
        void eat(){
            private int a = 5;
            class Local{
                void run(){
                    System.out.println("running");
                }
            }
            Local l = new Local();
            l.run();
        }
        public static void main(String args[]){
            Outer o = new Outer();
            o.eat();
        }
    }
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Static nested classes:
    A static class is a class that is created inside a class, is called a static nested class in Java.
    It cannot access non-static data members and methods. 
    It can be accessed by outer class name.

    class Outer{
        static int data = 30;
        static class Inner{
            void msg(){
                System.out.println("the message is here" + data);
            }
        }
        public static void main(String args[]){
            Outer.Inner obj = new Outer.Inner();
            obj.msg();
        }
    }

    if u have a static member inside a static class then u dont need to instantiate the object

    class Outer{
        static int data = 30;
        static class Inner{
            static void run(){
                System.out.println("the data is :" + data);
            }
        }
        public static void main(String args[]){
            Outer.Inner.run();
        }
    }

--------------------------------------------------------------------------------------------------------------------------------------------------------

NESTED INTERFACE :
    An interface, i.e., declared within another interface or class, is known as a nested interface.
    The nested interfaces are used to group related interfaces so that they can be easy to maintain.
    The nested interface must be referred to by the outer interface or class. It can't be accessed directly.

    The nested interface must be public if it is declared inside the interface, but it can have any access modifier if declared within the class.

    Nested interfaces are declared static

    interface Showable{  
     void show();  
     interface Message{  
     void msg();  
     }  
    }  
    class TestNestedInterface1 implements Showable.Message{  
     public void msg(){System.out.println("Hello nested interface");}  
  
     public static void main(String args[]){  
     Showable.Message message=new TestNestedInterface1();//upcasting here  
     message.msg();  
     }  
    }  

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

